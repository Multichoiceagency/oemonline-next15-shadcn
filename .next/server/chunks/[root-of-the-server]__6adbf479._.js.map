{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/enesk/Documents/oemonline-next15-shadcn/lib/env.ts"],"sourcesContent":["// lib/env.ts\r\n// Helpers ---------------------------------------------------\r\nfunction req(name: string, fallback?: string) {\r\n  const v = process.env[name] ?? fallback\r\n  if (v === undefined) throw new Error(`Missing env var: ${name}`)\r\n  return v\r\n}\r\n\r\nfunction optBool(name: string, def = false) {\r\n  const v = process.env[name]\r\n  if (v === undefined) return def\r\n  return [\"1\", \"true\", \"yes\", \"on\"].includes(String(v).toLowerCase())\r\n}\r\n\r\nfunction parseCsv(name: string, def: string[] = []) {\r\n  const v = process.env[name]\r\n  if (!v) return def\r\n  return v\r\n    .split(\",\")\r\n    .map((s) => s.trim())\r\n    .filter(Boolean)\r\n}\r\n\r\n// Normalizer voor linkingTargetType (TecDoc Pegasus 3.0)\r\n// Geldige waarden (volgens onboarding guide):\r\n// P = Vehicle Type (Passenger + Motorcycle + LCV)\r\n// V = Passenger Car\r\n// L = LCV\r\n// B = Motorcycle\r\n// O = CV Type (Commercial + Tractor)\r\n// C = Commercial Vehicle\r\n// T = Tractor\r\n// M = Engine\r\n// A = Axle\r\n// K = CV Body Type\r\n// H = HMD Vehicle\r\nfunction normalizeLinkingTargetType(\r\n  input?: string\r\n): \"P\" | \"V\" | \"L\" | \"B\" | \"O\" | \"C\" | \"T\" | \"M\" | \"A\" | \"K\" | \"H\" {\r\n  const s = (input || \"\").toUpperCase()\r\n  if ([\"P\"].includes(s)) return \"P\"\r\n  if ([\"V\"].includes(s)) return \"V\"\r\n  if ([\"L\"].includes(s)) return \"L\"\r\n  if ([\"B\"].includes(s)) return \"B\"\r\n  if ([\"O\"].includes(s)) return \"O\"\r\n  if ([\"C\"].includes(s)) return \"C\"\r\n  if ([\"T\"].includes(s)) return \"T\"\r\n  if ([\"M\"].includes(s)) return \"M\"\r\n  if ([\"A\"].includes(s)) return \"A\"\r\n  if ([\"K\"].includes(s)) return \"K\"\r\n  if ([\"H\"].includes(s)) return \"H\"\r\n  return \"V\"\r\n}\r\n\r\n// ENV object ------------------------------------------------\r\nexport const ENV = {\r\n  // --- TecDoc credentials ---\r\n  TECDOC_PROVIDER_ID: req(\"TECDOC_PROVIDER_ID\"),\r\n  TECDOC_API_KEY: req(\"TECDOC_API_KEY\"),\r\n\r\n  // --- Defaults ---\r\n  TECDOC_LANG_DEFAULT: process.env.TECDOC_LANG_DEFAULT || \"nl\",\r\n  TECDOC_LANGS: parseCsv(\"TECDOC_LANGS\", [\"nl\"]),\r\n  TECDOC_ARTICLE_COUNTRIES: parseCsv(\"TECDOC_ARTICLE_COUNTRIES\", [\"nl\"]),\r\n  TECDOC_LINKAGE_COUNTRY: process.env.TECDOC_LINKAGE_COUNTRY || \"nl\",\r\n\r\n  // --- Base endpoint Pegasus 3.0 ---\r\n  TECDOC_BASE_JSON:\r\n    process.env.TECDOC_BASE_JSON ||\r\n    \"https://webservice.tecalliance.services/pegasus-3-0/services/TecdocToCatDLB.jsonEndpoint\",\r\n\r\n  // --- Vehicle type filter ---\r\n  TECDOC_LINKING_TARGET_TYPE: normalizeLinkingTargetType(\r\n    process.env.TECDOC_LINKING_TARGET_TYPE || \"P\"\r\n  ),\r\n\r\n  // --- Extra opties ---\r\n  TECDOC_PLATE_ENABLED: optBool(\"TECDOC_PLATE_ENABLED\", false),\r\n  TECDOC_PLATE_COUNTRY: process.env.TECDOC_PLATE_COUNTRY || \"nl\",\r\n  TECDOC_DOWNLOAD_IMAGES: optBool(\"TECDOC_DOWNLOAD_IMAGES\", false),\r\n  TECDOC_DEBUG: optBool(\"TECDOC_DEBUG\", false),\r\n} as const\r\n\r\nexport type EnvShape = typeof ENV\r\n"],"names":[],"mappings":"AAAA,aAAa;AACb,8DAA8D;;;;;AAC9D,SAAS,IAAI,IAAY,EAAE,QAAiB;IAC1C,MAAM,IAAI,QAAQ,GAAG,CAAC,KAAK,IAAI;IAC/B,IAAI,MAAM,WAAW,MAAM,IAAI,MAAM,CAAC,iBAAiB,EAAE,MAAM;IAC/D,OAAO;AACT;AAEA,SAAS,QAAQ,IAAY,EAAE,MAAM,KAAK;IACxC,MAAM,IAAI,QAAQ,GAAG,CAAC,KAAK;IAC3B,IAAI,MAAM,WAAW,OAAO;IAC5B,OAAO;QAAC;QAAK;QAAQ;QAAO;KAAK,CAAC,QAAQ,CAAC,OAAO,GAAG,WAAW;AAClE;AAEA,SAAS,SAAS,IAAY,EAAE,MAAgB,EAAE;IAChD,MAAM,IAAI,QAAQ,GAAG,CAAC,KAAK;IAC3B,IAAI,CAAC,GAAG,OAAO;IACf,OAAO,EACJ,KAAK,CAAC,KACN,GAAG,CAAC,CAAC,IAAM,EAAE,IAAI,IACjB,MAAM,CAAC;AACZ;AAEA,yDAAyD;AACzD,8CAA8C;AAC9C,kDAAkD;AAClD,oBAAoB;AACpB,UAAU;AACV,iBAAiB;AACjB,qCAAqC;AACrC,yBAAyB;AACzB,cAAc;AACd,aAAa;AACb,WAAW;AACX,mBAAmB;AACnB,kBAAkB;AAClB,SAAS,2BACP,KAAc;IAEd,MAAM,IAAI,CAAC,SAAS,EAAE,EAAE,WAAW;IACnC,IAAI;QAAC;KAAI,CAAC,QAAQ,CAAC,IAAI,OAAO;IAC9B,IAAI;QAAC;KAAI,CAAC,QAAQ,CAAC,IAAI,OAAO;IAC9B,IAAI;QAAC;KAAI,CAAC,QAAQ,CAAC,IAAI,OAAO;IAC9B,IAAI;QAAC;KAAI,CAAC,QAAQ,CAAC,IAAI,OAAO;IAC9B,IAAI;QAAC;KAAI,CAAC,QAAQ,CAAC,IAAI,OAAO;IAC9B,IAAI;QAAC;KAAI,CAAC,QAAQ,CAAC,IAAI,OAAO;IAC9B,IAAI;QAAC;KAAI,CAAC,QAAQ,CAAC,IAAI,OAAO;IAC9B,IAAI;QAAC;KAAI,CAAC,QAAQ,CAAC,IAAI,OAAO;IAC9B,IAAI;QAAC;KAAI,CAAC,QAAQ,CAAC,IAAI,OAAO;IAC9B,IAAI;QAAC;KAAI,CAAC,QAAQ,CAAC,IAAI,OAAO;IAC9B,IAAI;QAAC;KAAI,CAAC,QAAQ,CAAC,IAAI,OAAO;IAC9B,OAAO;AACT;AAGO,MAAM,MAAM;IACjB,6BAA6B;IAC7B,oBAAoB,IAAI;IACxB,gBAAgB,IAAI;IAEpB,mBAAmB;IACnB,qBAAqB,QAAQ,GAAG,CAAC,mBAAmB,IAAI;IACxD,cAAc,SAAS,gBAAgB;QAAC;KAAK;IAC7C,0BAA0B,SAAS,4BAA4B;QAAC;KAAK;IACrE,wBAAwB,QAAQ,GAAG,CAAC,sBAAsB,IAAI;IAE9D,oCAAoC;IACpC,kBACE,QAAQ,GAAG,CAAC,gBAAgB,IAC5B;IAEF,8BAA8B;IAC9B,4BAA4B,2BAC1B,QAAQ,GAAG,CAAC,0BAA0B,IAAI;IAG5C,uBAAuB;IACvB,sBAAsB,QAAQ,wBAAwB;IACtD,sBAAsB,QAAQ,GAAG,CAAC,oBAAoB,IAAI;IAC1D,wBAAwB,QAAQ,0BAA0B;IAC1D,cAAc,QAAQ,gBAAgB;AACxC","debugId":null}},
    {"offset": {"line": 158, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/enesk/Documents/oemonline-next15-shadcn/lib/logger.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\r\n// lib/logger.ts\r\nimport { ENV } from \"./env\"\r\n\r\nexport function logDebug(label: string, data?: any) {\r\n  if (!ENV.TECDOC_DEBUG) return\r\n  try { console.log(`[TecDoc] ${label}`, data ?? \"\") } catch {}\r\n}\r\nexport function logError(label: string, data?: any) {\r\n  try { console.error(`[TecDoc][ERROR] ${label}:`, data ?? \"\") } catch {}\r\n}\r\n"],"names":[],"mappings":"AAAA,qDAAqD,GACrD,gBAAgB;;;;;;;AAChB;;AAEO,SAAS,SAAS,KAAa,EAAE,IAAU;IAChD,IAAI,CAAC,iKAAG,CAAC,YAAY,EAAE;IACvB,IAAI;QAAE,QAAQ,GAAG,CAAC,CAAC,SAAS,EAAE,OAAO,EAAE,QAAQ;IAAI,EAAE,OAAM,CAAC;AAC9D;AACO,SAAS,SAAS,KAAa,EAAE,IAAU;IAChD,IAAI;QAAE,QAAQ,KAAK,CAAC,CAAC,gBAAgB,EAAE,MAAM,CAAC,CAAC,EAAE,QAAQ;IAAI,EAAE,OAAM,CAAC;AACxE","debugId":null}},
    {"offset": {"line": 182, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/enesk/Documents/oemonline-next15-shadcn/lib/tecdoc.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\r\n// lib/tecdoc.ts\r\nimport { ENV } from \"./env\"\r\nimport { logDebug, logError } from \"./logger\"\r\n\r\n/** Veelgebruikte TecDoc resources als vaste mapping (type-safe). */\r\nexport const TecdocOps = {\r\n  // Vehicle tree\r\n  manufacturers: \"getManufacturers\",\r\n  modelSeries: \"getModelSeries\",\r\n  types: \"getTypes\",\r\n\r\n  // Vehicle details / linkages\r\n  vehiclesByIds2: \"getVehiclesByIds2\",\r\n  linkageTargets: \"getLinkageTargets\",\r\n  linkageTargetsByCarIds: \"getLinkageTargetsByCarIds\",\r\n\r\n  // Plate (let op: sommige tenants vereisen extra keySystemNumber)\r\n  vehiclesByPlate: \"getVehiclesByKeyNumberPlates\",\r\n\r\n  // Brands\r\n  amBrands: \"getAmBrands\",\r\n\r\n  // Categories (Generic Articles)\r\n  genericArticles: \"getGenericArticles\",\r\n  genericArticlesByLinkingTarget: \"getGenericArticlesByLinkingTarget\",\r\n\r\n  // Article IDs / staat\r\n  articleIdsWithState: \"getArticleIdsWithState\",\r\n\r\n  // Assigned articles (producten) voor voertuig\r\n  assignedByLinkingTarget: \"getAssignedArticlesByLinkingTarget\",\r\n  assignedByLinkingTarget2: \"getAssignedArticlesByLinkingTarget2\",\r\n  assignedByLinkingTarget3: \"getAssignedArticlesByLinkingTarget3\",\r\n  assignedByIds6: \"getAssignedArticlesByIds6\",\r\n\r\n  // Article details / media (varianten verschillen per tenant)\r\n  articleSearchByTerm: \"articleSearchByTerm\",\r\n  articleById: \"getArticles\",\r\n  articleMediaByIds: \"getArticleMediaByIds\",\r\n  articleMediaByIds6: \"getArticleMediaByIds6\",\r\n} as const\r\n\r\nexport type TecdocOp = typeof TecdocOps[keyof typeof TecdocOps]\r\nexport type TecdocResource = string\r\n\r\n/** Query helper: string */\r\nexport function qp(req: Request, key: string, def?: string) {\r\n  const url = new URL(req.url)\r\n  const val = url.searchParams.get(key)\r\n  return val == null ? def : val\r\n}\r\n\r\n/** Query helper: number */\r\nexport function qpn(req: Request, key: string, def?: number) {\r\n  const v = qp(req, key)\r\n  if (v == null) return def\r\n  const n = Number(v)\r\n  return Number.isFinite(n) ? n : def\r\n}\r\n\r\n/** Sommige endpoints verwachten { array: [...] } i.p.v. een kale array. */\r\nexport function toArrayParam<T = any>(a?: T[] | null) {\r\n  if (!a || a.length === 0) return undefined\r\n  return { array: a }\r\n}\r\n\r\n/** Basis JSON endpoint */\r\nexport const TECDOC_ENDPOINT =\r\n  ENV.TECDOC_BASE_JSON ||\r\n  \"https://webservice.tecalliance.services/pegasus-3-0/services/TecdocToCatDLB.jsonEndpoint\"\r\n\r\n/** Veel voorkomende defaultvelden â€“ worden per call toegevoegd tenzij overschreven. */\r\nconst COMMON_DEFAULTS = {\r\n  lang: ENV.TECDOC_LANG_DEFAULT,\r\n  country: ENV.TECDOC_LINKAGE_COUNTRY,\r\n  countryCode: ENV.TECDOC_LINKAGE_COUNTRY,\r\n  articleCountry:\r\n    ENV.TECDOC_ARTICLE_COUNTRIES[0] ?? ENV.TECDOC_LINKAGE_COUNTRY,\r\n}\r\n\r\n/** Verwijdert undefined/null waarden uit een object. */\r\nfunction clean<T extends Record<string, any>>(obj: T): T {\r\n  const out: Record<string, any> = {}\r\n  for (const [k, v] of Object.entries(obj)) {\r\n    if (v === undefined || v === null) continue\r\n    out[k] = v\r\n  }\r\n  return out as T\r\n}\r\n\r\n/** Plakt ?api_key=... (of &api_key=...) aan de endpoint-URL als die nog niet aanwezig is. */\r\nfunction withApiKey(url: string, apiKey?: string) {\r\n  if (!apiKey) return url\r\n  const hasQuery = url.includes(\"?\")\r\n  return url + (hasQuery ? \"&\" : \"?\") + \"api_key=\" + encodeURIComponent(apiKey)\r\n}\r\n\r\n/**\r\n * Algemene TecDoc JSON-call.\r\n *\r\n * Belangrijk:\r\n * - POST naar de *basis* jsonEndpoint (dus **niet** /<resource> achter de URL)\r\n * - Body: { [resource]: { provider, ...fields } }\r\n * - API key zetten we zowel als header **X-Api-Key** als in de query (?api_key=...)\r\n * - Caller moet velden als `linkingTargetType: \"P\"` zelf toevoegen waar vereist\r\n * - Pagination is *plat*: `page`, `perPage` (geen `{ number, size }`)\r\n */\r\nexport async function tecdocCall<T = any>(\r\n  resource: TecdocResource,\r\n  payload: Record<string, any>\r\n): Promise<T> {\r\n  const bodyObj: Record<string, any> = {\r\n    [resource]: clean({\r\n      provider: ENV.TECDOC_PROVIDER_ID,\r\n      ...COMMON_DEFAULTS,\r\n      ...payload,\r\n    }),\r\n  }\r\n\r\n  const url = withApiKey(TECDOC_ENDPOINT, ENV.TECDOC_API_KEY)\r\n\r\n  logDebug(\"REQUEST\", { resource, url, body: bodyObj })\r\n\r\n  const res = await fetch(url, {\r\n    method: \"POST\",\r\n    headers: {\r\n      Accept: \"application/json\",\r\n      \"Content-Type\": \"application/json\",\r\n      ...(ENV.TECDOC_API_KEY ? { \"X-Api-Key\": ENV.TECDOC_API_KEY } : {}),\r\n    },\r\n    body: JSON.stringify(bodyObj),\r\n    cache: \"no-store\",\r\n  })\r\n\r\n  let data: any\r\n  try {\r\n    data = await res.json()\r\n  } catch {\r\n    const text = await res.text().catch(() => \"\")\r\n    data = { status: res.status, statusText: text || res.statusText }\r\n  }\r\n\r\n  // TecDoc zet vaak {status,statusText} in de payload; behandel dat als fout.\r\n  if (!res.ok || (typeof data?.status === \"number\" && data.status >= 300)) {\r\n    logError(\"RESPONSE\", data ?? { status: res.status, statusText: res.statusText })\r\n    // Geef de TecDoc payload terug zodat de caller status/statusText kan tonen/loggen.\r\n    return (data ??\r\n      ({ status: res.status, statusText: res.statusText } as any)) as T\r\n  }\r\n\r\n  logDebug(\"RESPONSE\", data)\r\n  return data as T\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 322, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/enesk/Documents/oemonline-next15-shadcn/app/api/vehicles/route.ts"],"sourcesContent":["// app/api/vehicles/route.ts\r\n/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport { NextResponse } from \"next/server\"\r\n\r\n// Alias import om naamconflicten te voorkomen\r\nimport { tecdocCall as callTecdoc } from \"@/lib/tecdoc\"\r\nimport { ENV } from \"@/lib/env\"\r\nimport { logError, logDebug } from \"@/lib/logger\"\r\n\r\nexport const dynamic = \"force-dynamic\"\r\n\r\n// ---------------------------------------------------------------------------\r\n// Types & helpers\r\n// ---------------------------------------------------------------------------\r\ntype JsonOk<T> = { ok: true; mode: string; count: number; data: T; meta?: Record<string, any> }\r\ntype JsonErr = { ok: false; mode?: string | null; error: string; detail?: any }\r\n\r\nfunction jsonOK<T>(body: JsonOk<T>, init?: number | ResponseInit) {\r\n  let responseInit: ResponseInit | undefined;\r\n  if (typeof init === \"number\") {\r\n    responseInit = { status: init };\r\n  } else {\r\n    responseInit = init;\r\n  }\r\n  return NextResponse.json(body, responseInit);\r\n}\r\nfunction jsonERR(body: JsonErr, init?: number | ResponseInit) {\r\n  const status =\r\n    typeof init === \"number\"\r\n      ? init\r\n      : typeof init === \"object\" && init?.status\r\n      ? init.status\r\n      : 200\r\n  return NextResponse.json(body, { status })\r\n}\r\n\r\nfunction toInt(value: string | null) {\r\n  if (!value) return null\r\n  const n = Number(value)\r\n  return Number.isFinite(n) ? n : null\r\n}\r\nfunction asArray<T = any>(maybeArr: any): T[] {\r\n  if (!maybeArr) return []\r\n  if (Array.isArray(maybeArr)) return maybeArr\r\n  if ((maybeArr as any)?.item) return asArray<T>((maybeArr as any).item)\r\n  if (typeof maybeArr === \"object\") return [maybeArr as T]\r\n  return []\r\n}\r\nfunction maybeAttachDebug(meta: Record<string, any>, debugFlag: string | null, raw: any) {\r\n  if (debugFlag === \"1\" || debugFlag === \"true\") meta._debugRaw = raw\r\n  return meta\r\n}\r\nfunction slugify(s: string) {\r\n  return (s || \"\")\r\n    .toLowerCase()\r\n    .replace(/&/g, \" and \")\r\n    .replace(/[^a-z0-9]+/g, \"-\")\r\n    .replace(/(^-|-$)+/g, \"\")\r\n}\r\n\r\n// Personenautoâ€™s (Vehicle) en motoren (Engine)\r\nconst LTT_VEHICLE = \"V\" as const; // Passenger Car\r\nconst LTT_ENGINE = \"M\" as const; // Engine\r\n\r\n// Veelvoorkomende alias â†’ merknaam (strikt maar met vaste aliassen)\r\nconst MANUFACTURER_ALIASES: Record<string, string> = {\r\n  \"am\": \"Aston Martin\",\r\n  \"a-m\": \"Aston Martin\",\r\n  \"aston-martin\": \"Aston Martin\",\r\n  \"mb\": \"Mercedes-Benz\",\r\n  \"mercedes\": \"Mercedes-Benz\",\r\n  \"mercedes-benz\": \"Mercedes-Benz\",\r\n  \"vw\": \"Volkswagen\",\r\n  \"v-w\": \"Volkswagen\",\r\n  \"bmw\": \"BMW\",\r\n  \"b-m-w\": \"BMW\",\r\n  \"vauxhall\": \"Opel\",\r\n  \"skoda\": \"Å koda\",\r\n  \"Å¡koda\": \"Å koda\",\r\n}\r\n\r\n// ---------------------------------------------------------------------------\r\n// Normalizers (defensief tegen variÃ«rende TecDoc shapes)\r\n// ---------------------------------------------------------------------------\r\nfunction normManu(m: any) {\r\n  return {\r\n    id: m?.manuId ?? m?.manuNo ?? m?.id ?? m?.manuID ?? null,\r\n    name: m?.manuName ?? m?.name ?? m?.text ?? \"\",\r\n    slug: slugify(m?.manuName ?? m?.name ?? m?.text ?? \"\"),\r\n  }\r\n}\r\n\r\nfunction normModel(m: any) {\r\n  const id =\r\n    m?.modelSeriesId ??\r\n    m?.modId ??\r\n    m?.id ??\r\n    m?.modelId ??\r\n    m?.modelseriesID ??\r\n    null\r\n\r\n  const name =\r\n    m?.modelSeriesName ??\r\n    m?.modelname ??\r\n    m?.name ??\r\n    m?.text ??\r\n    \"\"\r\n\r\n  return {\r\n    id: id ? Number(id) : null,\r\n    name,\r\n    slug: slugify(name),\r\n    fromYear: m?.yearOfConstructionFrom ?? m?.constructionStart ?? m?.from ?? null,\r\n    toYear: m?.yearOfConstructionTo ?? m?.constructionEnd ?? m?.to ?? null,\r\n  }\r\n}\r\n\r\n/** Types = uitvoeringen/varianten binnen modelserie */\r\nfunction normType(t: any) {\r\n  const kw = t?.powerKW ?? t?.powerKw ?? t?.kW ?? t?.engineOutputKw ?? null\r\n  const hp = t?.powerHP ?? t?.hp ?? t?.PS ?? t?.engineOutputHp ?? null\r\n\r\n  const id =\r\n    t?.typeId ?? t?.kTypNr ?? t?.ktypNr ?? t?.ktypnr ?? t?.typeNo ?? null\r\n\r\n  const name = t?.typeName ?? t?.carName ?? t?.name ?? t?.description ?? \"\"\r\n\r\n  return {\r\n    id: id ? Number(id) : null,\r\n    name,\r\n    engineCode: t?.engineCode ?? t?.engine ?? null,\r\n    fuel: t?.fuelType ?? t?.fuel ?? t?.fuelTypeName ?? null,\r\n    body: t?.bodyType ?? t?.body ?? null,\r\n    powerKW: kw ? Number(kw) : null,\r\n    powerHP: hp ? Number(hp) : null,\r\n    ccm: t?.capacityCCM ?? t?.cubicCapacity ?? t?.displacementCCM ?? t?.ccm ?? null,\r\n    fromYear: t?.yearOfConstructionFrom ?? t?.constructionStart ?? t?.from ?? null,\r\n    toYear: t?.yearOfConstructionTo ?? t?.constructionEnd ?? t?.to ?? null,\r\n  }\r\n}\r\n\r\nfunction normVehicle(v: any) {\r\n  const k = v?.kTypNr ?? v?.ktypNr ?? v?.ktypnr ?? v?.typeId ?? null\r\n  return {\r\n    ktypNr: k ? Number(k) : null,\r\n    manufacturer: v?.manuName ?? v?.manufacturerName ?? null,\r\n    model: v?.modelName ?? v?.modelSeriesName ?? null,\r\n    typeName: v?.typeName ?? v?.carName ?? v?.name ?? null,\r\n    engineCode: v?.engineCode ?? v?.engine ?? null,\r\n    fuel: v?.fuelType ?? v?.fuel ?? null,\r\n    body: v?.bodyType ?? v?.body ?? null,\r\n    powerKW: v?.powerKW ?? v?.engineOutputKw ?? null,\r\n    powerHP: v?.powerHP ?? v?.engineOutputHp ?? null,\r\n    ccm: v?.capacityCCM ?? v?.cubicCapacity ?? v?.displacementCCM ?? v?.ccm ?? null,\r\n    fromYear: v?.yearOfConstructionFrom ?? v?.constructionStart ?? v?.from ?? null,\r\n    toYear: v?.yearOfConstructionTo ?? v?.constructionEnd ?? v?.to ?? null,\r\n    doors: v?.doors ?? v?.numberOfDoors ?? null,\r\n    cylinders: v?.cylinders ?? null,\r\n    transmission: v?.transmission ?? v?.gearbox ?? null,\r\n  }\r\n}\r\n\r\n// ---------------------------------------------------------------------------\r\n/** Exacte resolvers (gÃ©Ã©n fuzzy). Retourneert null als er geen 1-op-1 match is. */\r\n// ---------------------------------------------------------------------------\r\nasync function resolveManufacturerId(opts: {\r\n  nameOrAlias?: string | null\r\n  lang: string\r\n  country: string\r\n  countryCode: string\r\n  articleCountry: string\r\n}) {\r\n  const { nameOrAlias, lang, country, countryCode, articleCountry } = opts\r\n  if (!nameOrAlias) return null\r\n\r\n  const lowered = (nameOrAlias || \"\").toLowerCase().trim()\r\n  const aliasName = MANUFACTURER_ALIASES[lowered] || nameOrAlias\r\n  const wantedSlug = slugify(aliasName)\r\n  const wantedLower = aliasName.toLowerCase()\r\n\r\n  const res = await callTecdoc(\"getManufacturers\", {\r\n    provider: ENV.TECDOC_PROVIDER_ID,\r\n    lang,\r\n    country,\r\n    countryCode,\r\n    articleCountry,\r\n    linkingTargetType: LTT_VEHICLE,\r\n  })\r\n  const list = asArray(res?.data?.array).map(normManu).filter((m) => m.id && m.name)\r\n\r\n  const found = list.find(\r\n    (m) => m.slug === wantedSlug || (m.name || \"\").toLowerCase() === wantedLower\r\n  )\r\n  return found ? Number(found.id) : null\r\n}\r\n\r\nasync function resolveModelId(opts: {\r\n  manufacturerId: number\r\n  modelName?: string | null\r\n  lang: string\r\n  country: string\r\n  countryCode: string\r\n  articleCountry: string\r\n}) {\r\n  const { manufacturerId, modelName, lang, country, countryCode, articleCountry } = opts\r\n  if (!modelName) return null\r\n\r\n  const res = await callTecdoc(\"getModelSeries\", {\r\n    provider: ENV.TECDOC_PROVIDER_ID,\r\n    lang,\r\n    country,\r\n    countryCode,\r\n    articleCountry,\r\n    manuId: manufacturerId,\r\n    linkingTargetType: LTT_VEHICLE,\r\n  })\r\n  const models = asArray(res?.data?.array).map(normModel).filter((m) => m.id)\r\n\r\n  const wantedSlug = slugify(modelName)\r\n  const wantedLower = (modelName || \"\").toLowerCase()\r\n\r\n  const found = models.find(\r\n    (m) => m.slug === wantedSlug || (m.name || \"\").toLowerCase() === wantedLower\r\n  )\r\n  return found ? Number(found.id) : null\r\n}\r\n\r\n// ---------------------------------------------------------------------------\r\n// Handler\r\n// ---------------------------------------------------------------------------\r\nexport async function GET(req: Request) {\r\n  const url = new URL(req.url)\r\n  const mode = url.searchParams.get(\"mode\")\r\n\r\n  // manufacturer: id of naam/alias\r\n  let manufacturerId = toInt(url.searchParams.get(\"manufacturerId\"))\r\n  const manufacturerName =\r\n    url.searchParams.get(\"manufacturer\") ||\r\n    url.searchParams.get(\"manuName\") ||\r\n    url.searchParams.get(\"brand\")\r\n\r\n  // model: id of naam (strikt)\r\n  let modelId = toInt(url.searchParams.get(\"modelId\"))\r\n  const modelName = url.searchParams.get(\"model\") || url.searchParams.get(\"modelName\")\r\n\r\n  const ktypNr = toInt(url.searchParams.get(\"ktypNr\")) ?? toInt(url.searchParams.get(\"kTypNr\"))\r\n\r\n  // Land/taal defaults uit ENV\r\n  const lang = url.searchParams.get(\"lang\") || ENV.TECDOC_LANG_DEFAULT || \"nl\"\r\n  const country = url.searchParams.get(\"country\") || ENV.TECDOC_LINKAGE_COUNTRY || \"nl\"\r\n  const articleCountry = url.searchParams.get(\"articleCountry\") || ENV.TECDOC_ARTICLE_COUNTRIES?.[0] || country\r\n  const countryCode = url.searchParams.get(\"countryCode\") || country\r\n\r\n  const debug = url.searchParams.get(\"debug\")\r\n\r\n  // Healthcheck\r\n  if (!mode || mode === \"ping\") {\r\n    return jsonOK({\r\n      ok: true,\r\n      mode: \"ping\",\r\n      count: 0,\r\n      data: [],\r\n      meta: { message: \"vehicles API up\", vehicleLTT: LTT_VEHICLE, engineLTT: LTT_ENGINE },\r\n    })\r\n  }\r\n\r\n  try {\r\n    switch (mode) {\r\n      // -------------------------------------------------------------------\r\n      // Manufacturers (Passenger Car context, LTT=V)\r\n      // -------------------------------------------------------------------\r\n      case \"manufacturers\": {\r\n        const reqBody = {\r\n          provider: ENV.TECDOC_PROVIDER_ID,\r\n          lang, country, countryCode, articleCountry,\r\n          linkingTargetType: LTT_VEHICLE,\r\n        }\r\n        logDebug?.(\"[vehicles] getManufacturers\", reqBody)\r\n        const res = await callTecdoc(\"getManufacturers\", reqBody)\r\n        const arr = asArray(res?.data?.array)\r\n        const list = arr.map(normManu).filter((m) => m.id && m.name)\r\n        const meta = maybeAttachDebug(reqBody, debug, res)\r\n        return jsonOK({ ok: true, mode, count: list.length, data: list, meta })\r\n      }\r\n\r\n      // -------------------------------------------------------------------\r\n      // Models by manufacturer (id of exacte naam/alias)\r\n      // -------------------------------------------------------------------\r\n      case \"models\": {\r\n        if (!manufacturerId && manufacturerName) {\r\n          manufacturerId = await resolveManufacturerId({\r\n            nameOrAlias: manufacturerName,\r\n            lang, country, countryCode, articleCountry\r\n          })\r\n        }\r\n        if (!manufacturerId) {\r\n          return jsonERR({ ok: false, mode, error: \"Missing manufacturerId (exact name allowed via ?manufacturer=...)\" }, 400)\r\n        }\r\n\r\n        const reqBody = {\r\n          provider: ENV.TECDOC_PROVIDER_ID,\r\n          lang, country, countryCode, articleCountry,\r\n          manuId: manufacturerId,\r\n          linkingTargetType: LTT_VEHICLE,\r\n        }\r\n        logDebug?.(\"[vehicles] getModelSeries\", reqBody)\r\n        const res = await callTecdoc(\"getModelSeries\", reqBody)\r\n        const arr = asArray(res?.data?.array)\r\n        const list = arr.map(normModel).filter((m) => m.id && m.name)\r\n\r\n        const meta = maybeAttachDebug({ ...reqBody, resolvedManufacturerId: manufacturerId }, debug, res)\r\n        return jsonOK({ ok: true, mode, count: list.length, data: list, meta })\r\n      }\r\n\r\n      // -------------------------------------------------------------------\r\n      // Types by model (exacte match vereist bij naam-resolve)\r\n      // -------------------------------------------------------------------\r\n      case \"types\": {\r\n        if (!modelId && modelName) {\r\n          if (!manufacturerId && manufacturerName) {\r\n            manufacturerId = await resolveManufacturerId({\r\n              nameOrAlias: manufacturerName,\r\n              lang, country, countryCode, articleCountry\r\n            })\r\n            if (!manufacturerId) {\r\n              return jsonERR({ ok: false, mode, error: \"Manufacturer not found (exact match required)\" }, 404)\r\n            }\r\n          }\r\n          if (!manufacturerId) {\r\n            return jsonERR({ ok: false, mode, error: \"Missing manufacturerId to resolve modelId\" }, 400)\r\n          }\r\n          modelId = await resolveModelId({\r\n            manufacturerId,\r\n            modelName,\r\n            lang, country, countryCode, articleCountry\r\n          })\r\n          if (!modelId) {\r\n            return jsonERR({ ok: false, mode, error: \"Model not found (exact match required for this manufacturer)\" }, 404)\r\n          }\r\n        }\r\n\r\n        if (!modelId) {\r\n          return jsonERR(\r\n            { ok: false, mode, error: \"Missing modelId (exact model name required if resolving by name)\" },\r\n            400\r\n          )\r\n        }\r\n\r\n        const reqBody = {\r\n          provider: ENV.TECDOC_PROVIDER_ID,\r\n          lang, country, countryCode, articleCountry,\r\n          modelId,\r\n          linkingTargetType: LTT_VEHICLE, // \"V\"\r\n        }\r\n        logDebug?.(\"[vehicles] getVehicleTypesByModel\", reqBody)\r\n\r\n        let res: any\r\n        try {\r\n          res = await callTecdoc(\"getVehicleTypesByModel\", reqBody)\r\n        } catch {\r\n          res = await callTecdoc(\"getTypes\", reqBody)\r\n        }\r\n\r\n        const arr = asArray(res?.data?.array)\r\n        const list = arr.map(normType).filter((t) => t.id && (t.name || t.engineCode))\r\n        const meta = maybeAttachDebug(reqBody, debug, res)\r\n        return jsonOK({ ok: true, mode, count: list.length, data: list, meta })\r\n      }\r\n\r\n      // -------------------------------------------------------------------\r\n      // Vehicle details by kTypNr (Passenger Car, LTT=V)\r\n      // -------------------------------------------------------------------\r\n      case \"vehicle\": {\r\n        if (!ktypNr) return jsonERR({ ok: false, mode, error: \"Missing ktypNr\" }, 400)\r\n\r\n        const reqBody = {\r\n          provider: ENV.TECDOC_PROVIDER_ID,\r\n          lang, country, countryCode, articleCountry,\r\n          ktypNr,\r\n          linkingTargetType: LTT_VEHICLE,\r\n        }\r\n        logDebug?.(\"[vehicles] getVehicleByIds\", reqBody)\r\n\r\n        let res: any\r\n        try {\r\n          res = await callTecdoc(\"getVehicleByIds\", reqBody)\r\n        } catch {\r\n          res = await callTecdoc(\"getVehicleDetails\", reqBody)\r\n        }\r\n\r\n        const arr = asArray(res?.data?.array ?? res?.data)\r\n        const first = arr[0] ?? {}\r\n        const vehicle = normVehicle(first)\r\n\r\n        const meta = maybeAttachDebug(reqBody, debug, res)\r\n        return jsonOK({\r\n          ok: true,\r\n          mode,\r\n          count: vehicle?.ktypNr ? 1 : 0,\r\n          data: vehicle?.ktypNr ? [vehicle] : [],\r\n          meta,\r\n        })\r\n      }\r\n\r\n      // -------------------------------------------------------------------\r\n      // Engines by model (Engine domain, LTT=M) â€” exacte model-resolve\r\n      // -------------------------------------------------------------------\r\n      case \"engines\": {\r\n        if (!modelId && modelName) {\r\n          if (!manufacturerId && manufacturerName) {\r\n            manufacturerId = await resolveManufacturerId({\r\n              nameOrAlias: manufacturerName,\r\n              lang, country, countryCode, articleCountry\r\n            })\r\n            if (!manufacturerId) {\r\n              return jsonERR({ ok: false, mode, error: \"Manufacturer not found (exact match required)\" }, 404)\r\n            }\r\n          }\r\n          if (!manufacturerId) {\r\n            return jsonERR({ ok: false, mode, error: \"Missing manufacturerId to resolve modelId\" }, 400)\r\n          }\r\n          modelId = await resolveModelId({\r\n            manufacturerId,\r\n            modelName,\r\n            lang, country, countryCode, articleCountry\r\n          })\r\n          if (!modelId) {\r\n            return jsonERR({ ok: false, mode, error: \"Model not found (exact match required for this manufacturer)\" }, 404)\r\n          }\r\n        }\r\n\r\n        if (!modelId) {\r\n          return jsonERR(\r\n            { ok: false, mode, error: \"Missing modelId (exact model name required if resolving by name)\" },\r\n            400\r\n          )\r\n        }\r\n\r\n        const base = {\r\n          provider: ENV.TECDOC_PROVIDER_ID,\r\n          lang, country, countryCode, articleCountry,\r\n          modelId,\r\n          linkingTargetType: LTT_ENGINE, // \"M\"\r\n        }\r\n        logDebug?.(\"[vehicles] engines primary payload\", base)\r\n\r\n        let res: any\r\n        try {\r\n          res = await callTecdoc(\"getEnginesByModel\", base)\r\n        } catch {\r\n          // Fallback via linkage targets\r\n          logDebug?.(\"[vehicles] engines fallback linkageTargets\", base)\r\n          res = await callTecdoc(\"getLinkageTargets\", {\r\n            provider: ENV.TECDOC_PROVIDER_ID,\r\n            linkageTargetCountry: country,\r\n            lang,\r\n            linkageTargetType: LTT_ENGINE, // 'M'\r\n            vehicleModelSeriesIds: modelId,\r\n            perPage: 0,\r\n            page: 1,\r\n          } as any)\r\n        }\r\n\r\n        const rawList =\r\n          (Array.isArray(res?.data?.linkageTargets))\r\n            ? res.data.linkageTargets\r\n            : (asArray(res?.data?.array) || [])\r\n\r\n        const list = (rawList || [])\r\n          .map((e: any) => {\r\n            const id = e?.linkageTargetId ?? e?.engineId ?? e?.id ?? e?.typeId ?? null\r\n            const name = e?.description ?? e?.engineName ?? e?.typeName ?? e?.name ?? \"\"\r\n            const kw = e?.powerKwFrom ?? e?.powerKW ?? e?.engineOutputKw ?? null\r\n            const hp = e?.powerHpFrom ?? e?.powerHP ?? e?.engineOutputHp ?? null\r\n            const ccm = e?.cylinderCapacity ?? e?.ccm ?? e?.capacityCCM ?? e?.displacementCCM ?? null\r\n            const code = e?.engineCode ?? e?.code ?? null\r\n            const from = e?.beginYearMonth ?? e?.yearOfConstructionFrom ?? null\r\n            const to = e?.endYearMonth ?? e?.yearOfConstructionTo ?? null\r\n\r\n            return {\r\n              id: id ? Number(id) : null,\r\n              name,\r\n              code,\r\n              powerKW: kw ? Number(kw) : null,\r\n              powerHP: hp ? Number(hp) : null,\r\n              ccm,\r\n              from,\r\n              to,\r\n            }\r\n          })\r\n          .filter((x: any) => x.id)\r\n\r\n        const meta = maybeAttachDebug({ ...base, resolvedModelId: modelId }, debug, res)\r\n        return jsonOK({ ok: true, mode, count: list.length, data: list, meta })\r\n      }\r\n\r\n      default:\r\n        return jsonERR({ ok: false, mode, error: \"Unsupported mode\" }, 400)\r\n    }\r\n  } catch (err: any) {\r\n    logError?.(\"Vehicles API error\", err)\r\n    const detail = err?.response?.data ?? err?.message ?? (typeof err === \"string\" ? err : \"Unknown error\")\r\n    return jsonERR({ ok: false, mode, error: \"Internal error while fetching data from TecDoc\", detail })\r\n  }\r\n}\r\n\r\n// Uptime/health\r\nexport async function HEAD() {\r\n  return new NextResponse(null, { status: 200 })\r\n}\r\n\r\n// CORS (optioneel)\r\nexport async function OPTIONS() {\r\n  const headers = {\r\n    \"Access-Control-Allow-Origin\": \"*\",\r\n    \"Access-Control-Allow-Methods\": \"GET,HEAD,OPTIONS\",\r\n    \"Access-Control-Allow-Headers\": \"Content-Type, Authorization\",\r\n  }\r\n  return new NextResponse(null, { status: 204, headers })\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}}]
}