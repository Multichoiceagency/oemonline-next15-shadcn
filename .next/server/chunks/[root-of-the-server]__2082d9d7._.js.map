{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 49, "column": 0}, "map": {"version":3,"sources":["file:///Users/macbookpro/Documents/GitHub/oemonline-next15-shadcn/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\n\nconst globalForPrisma = global as unknown as { prisma: PrismaClient };\n\nexport const prisma =\n  globalForPrisma.prisma ||\n  new PrismaClient({\n    log: [\"query\", \"info\", \"warn\", \"error\"],\n  });\n\nif (process.env.NODE_ENV !== \"production\") globalForPrisma.prisma = prisma;\n\nexport default prisma;\n"],"names":[],"mappings":";;;;;;AAAA;;AAEA,MAAM;AAEC,MAAM,SACX,gBAAgB,MAAM,IACtB,IAAI,6IAAY,CAAC;IACf,KAAK;QAAC;QAAS;QAAQ;QAAQ;KAAQ;AACzC;AAEF,wCAA2C,gBAAgB,MAAM,GAAG;uCAErD","debugId":null}},
    {"offset": {"line": 72, "column": 0}, "map": {"version":3,"sources":["file:///Users/macbookpro/Documents/GitHub/oemonline-next15-shadcn/app/api/users/route.ts"],"sourcesContent":["import prisma from \"@/lib/prisma\";\n\nexport async function GET() {\n  const users = await prisma.user.findMany();\n  return Response.json(users);\n}\n\nexport async function POST(req: Request) {\n  const body = await req.json();\n  const user = await prisma.user.create({ data: body });\n  return Response.json(user);\n}\n"],"names":[],"mappings":";;;;;;AAAA;;AAEO,eAAe;IACpB,MAAM,QAAQ,MAAM,0HAAM,CAAC,IAAI,CAAC,QAAQ;IACxC,OAAO,SAAS,IAAI,CAAC;AACvB;AAEO,eAAe,KAAK,GAAY;IACrC,MAAM,OAAO,MAAM,IAAI,IAAI;IAC3B,MAAM,OAAO,MAAM,0HAAM,CAAC,IAAI,CAAC,MAAM,CAAC;QAAE,MAAM;IAAK;IACnD,OAAO,SAAS,IAAI,CAAC;AACvB","debugId":null}}]
}